/*
 * File:   postlab6.c
 * Author: Marce
 *
 * Created on March 29, 2023, 9:44 PM
 */

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits (INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O function on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)
// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits Write protection off)
// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

//librerías
#include <xc.h>
#include <stdint.h>
#include <stdio.h>
#define _XTAL_FREQ 4000000
#define _tmr0_value 237

/*------------------------------------------------------------------------------
 * Displays
 ------------------------------------------------------------------------------*/

unsigned char display[] =
{
    0b00111111, // 0
    0b00000110, // 1
    0b01011011, // 2
    0b01001111, // 3
    0b01100110, // 4
    0b01101101, // 5
    0b01111101, // 6
    0b00000111, // 7
    0b01111111, // 8
    0b01101111, // 9
};


/*------------------------------------------------------------------------------
 * VARIABLES
 ------------------------------------------------------------------------------*/

unsigned int centenas, unidades, decenas, residuo;
unsigned int numero = 0; // Se inicializa con el valor 0

/*------------------------------------------------------------------------------
 * PROTOTIPO DE FUNCIONES
 ------------------------------------------------------------------------------*/
void setup(void);

/*------------------------------------------------------------------------------
 * INTERRUPCIONES
 ------------------------------------------------------------------------------*/
void __interrupt() isr (void){              // Función de interrupción
    if (T0IF == 1){                         // Verifica si la bandera de interrupción del temporizador 0 es igual a 1
        PORTD++;                            // Incrementa el valor del puerto D en 1
    }
   
    if(T0IF == 1){                          // Verifica si la bandera de interrupción del temporizador 0 es igual a 1
        numero = numero*1.964;              // Multiplica "numero" por 1.964 y guarda el resultado en "numero"
        centenas = numero/100;              // Calcula las centenas de "numero"
        residuo = numero%100;               // Calcula el residuo de "numero" al dividir entre 100
        decenas = residuo/10;               // Calcula las decenas del residuo anterior
        unidades = residuo%10;              // Calcula las unidades del residuo anterior
        T0IF = 0;                           // Limpia la bandera de interrupción del temporizador 0 estableciéndola en 0
    }
   
    if(PIR1bits.ADIF){                      // Canal
        if(ADCON0bits.CHS == 12){           // Verificamos sea AN12 (RB0) el canal seleccionado
            PORTA = ADRESH;                 // Mostramos ADRESH en PORTC
        }
       
        else
            numero = ADRESH;
            PIR1bits.ADIF = 0;               // Limpiamos bandera de interrupción
    }
}

/*------------------------------------------------------------------------------
 * CICLO PRINCIPAL
 ------------------------------------------------------------------------------*/
void main(void) {
    setup();                             // Se llama a la función setup para inicializar el microcontrolador
   
    __delay_us(50);                     // Se espera 50 microsegundos
    ADCON0bits.GO = 1;                  // Se inicia la conversión analógico-digital
   
    while(1){
       
        PORTC = display[centenas];      // Salida de centenas en el display en puerto C
        PORTE = 0B001;                  // Se activa bit 0 en puerto E para transistores.
        __delay_ms(10);                 // Retardo de 10 milisegundos
        PORTE = 0B000;                  // Desactivación de la selección de digitos
       
        PORTC = display[decenas];       // Salida de decenas en el display en puerto C
        PORTE = 0B010;                  // Se activa bit 1 en puerto E para transistores.
        __delay_ms(10);                 // Retardo de 10 milisegundos
        PORTE = 0B000;                  // Desactivación de la selección de digitos
       
        PORTC = display[unidades];      // Salida de decenas en el display en puerto C
        PORTE = 0B100;                  // Se activa bit 1 en puerto E para transistores.
        __delay_ms(10);                 // Retardo de 10 milisegundos
        PORTE = 0B000;                  // Desactivación de la selección de digitos
       
        if(ADCON0bits.GO == 0){                 // Verificar si la conversión ya ha terminado               
            if(ADCON0bits.CHS == 12) {  // Verificar si el canal actual es AN12(RB0)
                ADCON0bits.CHS = 10;    // Cambiar al canal AN10(RB1)
            }
            else
                ADCON0bits.CHS = 12;    // Cambiar al canal AN12(RB0))
            
            __delay_us(100);            // Retardo de 100 microsegundos para permitir la estabilización del canal
            ADCON0bits.GO = 1;          // Inicio de nueva conversión
        }
    }
}


//------------------------------------------------------------------------------
// CONFIGURACION
//------------------------------------------------------------------------------*/
void setup(void){
// Configuración de pines de entrada/salida y de los puertos A, B, C, D y E
    ANSEL = 0;                      // Configuramos los pines AN como entradas digitales
    ANSELH = 0b00000011;            // Configuramos los pines AN8 y AN9 como entradas analógicas

    TRISA = 0;                      // Configuramos todos los pines del puerto A como salidas digitales
    PORTA = 0;                      // Ponemos todos los pines del puerto A en estado bajo

    PORTE = 0;                      // Ponemos todos los pines del puerto E en estado bajo
    TRISE = 0;                      // Configuramos todos los pines del puerto E como salidas digitales

    TRISB = 0b00000011;             // Configuramos los pines RB0 y RB1 como entradas
    PORTB = 0b00000011;             // Ponemos los pines RB0 y RB1 en estado alto

    TRISC = 0;                      // Configuramos todos los pines del puerto C como salidas digitales
    PORTC = 0;                      // Ponemos todos los pines del puerto C en estado bajo

    TRISD = 0XFE;                   // Configuramos el pin RD0 como salida y el resto como entradas
    PORTD = 0;                      // Ponemos todos los pines del puerto D en estado bajo


// CONFIGURACION DEL OSCILADOR
    OSCCONbits.IRCF2 = 1;
    OSCCONbits.IRCF1 = 1;
    OSCCONbits.IRCF0 = 0; // 4MHZ
    OSCCONbits.SCS = 1;  // OSCILADOR INTERNO
   
    // CONFIGURACION DEL TMR0
    OPTION_REGbits.T0CS = 0;
    OPTION_REGbits.PSA = 0;     // HABILITAMOS EL PRESCALER
    OPTION_REGbits.PS2 = 1;
    OPTION_REGbits.PS1 = 1;
    OPTION_REGbits.PS0 = 1; // PRESCALER 1:256
   
    // CONFIGURACION ADC
    ADCON0bits.ADCS = 0b01;     // Fosc/8
    ADCON1bits.VCFG0 = 0;       // VDD
    ADCON1bits.VCFG1 = 0;       // VSS
    ADCON0bits.CHS = 12;    // Seleccionamos el AN12
   
   
    ADCON1bits.ADFM = 0;        // Justificado a la izquierda
    __delay_us(50);             // Sample time
    ADCON0bits.ADON = 1;        // Habilitamos modulo ADC
   
    // CONFIGURACION INTERRUPCIONES
    PIR1bits.ADIF = 0;          // Limpiamos bandera de ADC
    PIE1bits.ADIE = 1;          // Habilitamos interrupcion de ADC
    INTCONbits.PEIE = 1;        // Habilitamos int. de perifericos
    INTCONbits.GIE = 1;         // Habilitamos int. globales        
    INTCONbits.T0IE = 1;        // Establece el bit T0IE en el registro INTCON en 1 para habilitar la interrupción del temporizador TMR0.
    INTCONbits.T0IF = 0;        // Limpia el bit de interrupción del temporizador TMR0
    INTCONbits.TMR0IF = 0;      // Limpia el bit de bandera de desbordamiento del temporizador TMR0
    INTCONbits.TMR0IE = 1;      // Habilita la interrupción del temporizador TMR0
    INTCONbits.RBIF = 0;        // Limpia la bandera de interrupción del puerto B

   
    return;
}
